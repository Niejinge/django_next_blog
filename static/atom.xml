<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>镍铬合金的博客!</title>
  
  <subtitle>情义小孟常，百里擒飞狐！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-25T14:12:51.037Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>GoldBro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git学习总结</title>
    <link href="http://yoursite.com/2017/12/25/git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/12/25/git学习总结/</id>
    <published>2017-12-25T13:13:21.000Z</published>
    <updated>2017-12-25T14:12:51.037Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>最近系统的学习了一下git, 虽然只是了解了最基本的用法,再此还是记录一下, 以备以后忘记查阅,学习教程来自<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="Git教程" target="_blank" rel="external">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a>,感谢廖老师.</p></blockquote><p>Git是目前世界上最先进的分布式版本控制系统,对于我们编写代码的保存,分享都特别有用,可以说是程序员必须要掌握的技能,下面就总结一下在git常用操作.</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><ul><li>本地仓库的建立与初始化等操作</li></ul><p>初始化仓库:<code>git init</code>;</p><p>把文件添加到仓库:<code>git add file</code> file是你要提交的文件名;</p><p>把文件提交到仓库:<code>git commit -m &quot;描述语言&quot;</code> “”里面的内容是对你此次提交的描述,以便于以后查看;</p><p>可以用<code>git status</code>查看工作区的情况,平时可以多用这个命令看看自己的仓库状态;</p><p>git容许我们在版本之间穿梭, 使用命令<code>git reset --hard commit_id</code>　 穿梭前,可以用<code>git log</code>查看提交历史;</p><p>初始化的文件夹就相当于一个工作区, 里面的内容用git add之后文件便被存到暂存区, 然后才可以进行commit操作;</p><p>当你该乱了工作区某个文件的内容,想直接丢弃工作取得修改时, 用命令    <code>git checkout -- file</code>,　 当你不但该乱了工作区的某个文件的内容, 还添加到了暂存区时, 想丢弃修改, 可以先用<code>git reset HEAD file</code>, 然后再进行上一步操作即可;</p><p>关联远程库: <code>git remote add origin git@server-name:path/repo-name.git</code>;</p><p>关联后, 使用<code>git push -u origin master</code>第一次推送master分支的所有内容, 此后就可以用<code>git push origin master</code>推送修改;</p><ul><li>分支操作<blockquote><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。有人把 Git 的分支模型称为它的`‘必杀技特性’’，也正因为这一特性，使得 Git 从众多版本控制系统中脱颖而出。 为何 Git 的分支模型如此出众呢？ Git 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。</p></blockquote></li></ul><p>查看分支: <code>git branch</code>;</p><p>创建分支: <code>git branch name</code>, name是要创建的分支名;</p><p>切换分支: <code>git checkout name</code>, name是要切换到的分支名;</p><p>创建+切换分支: <code>git checkout -b name</code>;</p><p>合并某分支到当前分支: <code>git merge name</code>: 这步操作很有用,比如把dev分支的内容合并到主分支上,然后在主分支上进行向远程仓库的推送;</p><p>删除分支: <code>git branch -d name</code>;</p><p>可以用<code>git log --graph</code>查看分支合并图;</p><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场;</p><p>当进行新的开发时,最好新建一个分支, 如果要丢弃一个并没有被合并过的分支, 可以通过<code>git branch -D name</code>进行强制删除(注意D大写);</p><p>查看远程库信息:<code>git remote -v</code>;</p><p>从本地分支推送: <code>git push origin branch-name</code>, 如果推送失败, 先用<code>git pull</code>抓取远程的新提交, 然后处理冲突后再提交;</p><ul><li>标签相关操作<blockquote><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p></blockquote></li></ul><p>创建一个标签:<code>git tag name</code>, 默认为HEAD, 也可以指定一个commit id;</p><p>指定标签信息: <code>git tag -a tagname -m &quot;blablabla...&quot;</code>;</p><p>查看所有标签: <code>git tag</code>;</p><p>推送一个本地标签: <code>git push origin tagname</code>, <code>git push origin --tags</code>可以推送全部本地标签;</p><p>删除一个远程标签: <code>git push origin :refs/tags/tagname</code></p><hr><p>在gitHub上,可以fork热门的开源仓库,并对其进行贡献自己的代码,<br>把fork到自己仓库的代码可以使用<code>git clone</code>下载到本地进行修改,然后推送到自己的代码库,<br>之后就可以使用<code>pull request</code>给官方仓库来进行贡献,如果你的代码确实有用,可能就会被官方采纳, 并修改至官方库.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近系统的学习了一下git, 虽然只是了解了最基本的用法,再此还是记录一下, 以备以后忘记查阅,学习教程来自&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; title=&quot;Git教程&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&lt;/a&gt;,感谢廖老师.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统,对于我们编写代码的保存,分享都特别有用,可以说是程序员必须要掌握的技能,下面就总结一下在git常用操作.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>夕阳下的黄昏</title>
    <link href="http://yoursite.com/2017/12/23/dailylife/"/>
    <id>http://yoursite.com/2017/12/23/dailylife/</id>
    <published>2017-12-23T14:28:06.000Z</published>
    <updated>2017-12-23T14:30:22.103Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://i.imgur.com/5xFD3i2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5xFD3i2.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python生成激活码,并存入mysql数据库中</title>
    <link href="http://yoursite.com/2017/12/20/python-database-test/"/>
    <id>http://yoursite.com/2017/12/20/python-database-test/</id>
    <published>2017-12-20T15:07:59.000Z</published>
    <updated>2017-12-20T15:24:17.878Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>今天学习了用python生成激活码,并存入mysql中. 这个小练习很简单,容易理解</p></blockquote><a id="more"></a><ul><li><p>首先是生成激活码,这里使用了两种方法生成激活码,第一种是使用random,具体如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pymysql, random, string</div><div class="line">chars = string.digits + string.ascii_letters</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomkey</span><span class="params">(num)</span>:</span></div><div class="line">    id_list = [<span class="string">""</span>.join(random.sample(chars, <span class="number">20</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(num)]</div><div class="line">    <span class="keyword">return</span> id_list</div></pre></td></tr></table></figure></li><li><p>第二种方法是使用python的uuid:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid4</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uuidkey</span><span class="params">(num)</span>:</span></div><div class="line">    id_list = [str(uuid4()) <span class="keyword">for</span> i <span class="keyword">in</span> range(num)]</div><div class="line">    <span class="keyword">return</span> id_list</div></pre></td></tr></table></figure></li></ul><blockquote><p>接下来是把生成的激活码存入mysql数据库,由于我用的是python3, 因此mysqldb已经不能使用,并用pymysql代替,具体安装方法可百度.</p></blockquote><p>具体代码如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_table_put_keys</span><span class="params">(id_list, table)</span>:</span></div><div class="line">    conn=pymysql.connect(</div><div class="line">        host=<span class="string">'localhost'</span>,</div><div class="line">        port=<span class="number">3306</span>,</div><div class="line">        user=<span class="string">'root'</span>,</div><div class="line">        passwd=<span class="string">'jnbsyyy123'</span>,</div><div class="line">        db=<span class="string">'test'</span>,</div><div class="line">    )  </div><div class="line">    cur = conn.cursor()</div><div class="line">    cur.execute(<span class="string">"drop table if exists %s"</span> % table)</div><div class="line">    cur.execute(<span class="string">"create table %s(id int, coupon char(40))"</span> % table)</div><div class="line">    temp = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> id_list:</div><div class="line">        cur.execute(<span class="string">"insert into %s values('%d', '%s')"</span>  %(table,temp,i))</div><div class="line">        temp=temp+<span class="number">1</span></div><div class="line">    cur.close()</div><div class="line">    conn.commit()</div><div class="line">    conn.close()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    create_table_put_keys(uuidkey(<span class="number">200</span>), <span class="string">'uuidtable'</span>)</div><div class="line">    create_table_put_keys(randomkey(<span class="number">200</span>), <span class="string">'randomtable'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure></p><p>大功告成,数据库数据如下<br><img src="https://i.imgur.com/47etpCQ.jpg" alt=""><br><img src="https://i.imgur.com/FdjCkIB.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天学习了用python生成激活码,并存入mysql中. 这个小练习很简单,容易理解&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快速排序和动态规划使用的简单记录</title>
    <link href="http://yoursite.com/2017/12/10/daily-life/"/>
    <id>http://yoursite.com/2017/12/10/daily-life/</id>
    <published>2017-12-10T14:47:50.000Z</published>
    <updated>2017-12-20T15:25:12.656Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>以下代码都是自己学习过程中敲的,想了想还是记录下来比较好,虽然实现的很难堪,因为很多函数具体细节总是出错,所以都是用的最直白,但是也是最耗费资源的方式写下来的,没有用到vector,arraylist等等新型数组,因为总是写错,希望以后可以慢慢学习着使用这些数组,容器来写,慢慢练习.</p></blockquote><a id="more"></a><p>快速排序简单实现(c++版)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> l, <span class="keyword">int</span> u)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"here is a quick sort example: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"set a  size of array to continue:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; n;</div><div class="line"><span class="keyword">int</span> <span class="built_in">array</span>[n];</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"initial the array"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">array</span>[i];</div><div class="line">&#125;</div><div class="line">qsort(<span class="built_in">array</span>, <span class="number">0</span>, n<span class="number">-1</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</div><div class="line"> &#123;</div><div class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="built_in">array</span>[i] &lt;&lt; <span class="string">" "</span>;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> l, <span class="keyword">int</span> u)</span></span></div><div class="line"><span class="function"> </span>&#123;</div><div class="line"> <span class="keyword">if</span>(l &gt;= u)</div><div class="line"> <span class="keyword">return</span>;</div><div class="line"> <span class="keyword">int</span> m =l;</div><div class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=l+<span class="number">1</span>; i&lt;=u; i++)</div><div class="line"> &#123;</div><div class="line"> <span class="keyword">if</span>(a[i] &lt; a[l])</div><div class="line"> &#123;</div><div class="line"> swap(a[++m], a[i]);</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> swap(a[l], a[m]);</div><div class="line"> qsort(a, l, m<span class="number">-1</span>);</div><div class="line"> qsort(a, m+<span class="number">1</span>, u);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p><p>动态规划算法实现二维矩阵从左上角到右下角最短路径的算法实现(c++),每部只能向下或者向右走.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">int</span> m,n;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"please input the row and col:"</span>;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</div><div class="line"><span class="keyword">int</span> <span class="built_in">array</span>[m][n];</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"please set number to the array:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">cin</span> &gt;&gt; <span class="built_in">array</span>[i][j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"the array list here:"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</div><div class="line">&#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">array</span>[i][j] &lt;&lt; <span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"]"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> p[m][n];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)</div><div class="line">p[i][j] = <span class="built_in">array</span>[i][j];</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>)</div><div class="line">p[i][j] = p[i][j<span class="number">-1</span>] + <span class="built_in">array</span>[i][j];</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>)</div><div class="line">p[i][j] = p[i<span class="number">-1</span>][j] + <span class="built_in">array</span>[i][j];</div><div class="line"><span class="keyword">else</span></div><div class="line">p[i][j] = min(p[i<span class="number">-1</span>][j], p[i][j<span class="number">-1</span>]) + <span class="built_in">array</span>[i][j];</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"最短路径长度为: "</span> &lt;&lt; p[m<span class="number">-1</span>][n<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">int</span> road[m+n<span class="number">-1</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m+n<span class="number">-2</span>,x=m<span class="number">-1</span>,y=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">    &#123;</div><div class="line">    road[i] = <span class="built_in">array</span>[x][y];</div><div class="line">    <span class="keyword">if</span>(x&gt;<span class="number">0</span>&amp;&amp;y&gt;<span class="number">0</span>)</div><div class="line">&#123;</div><div class="line"><span class="keyword">if</span>(p[x<span class="number">-1</span>][y]&lt;p[x][y<span class="number">-1</span>])</div><div class="line">    x--;</div><div class="line">    <span class="keyword">else</span></div><div class="line">y--;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">0</span>)</div><div class="line">y--;</div><div class="line"><span class="keyword">else</span></div><div class="line">x--;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m+n<span class="number">-1</span>;i++)</div><div class="line"><span class="built_in">cout</span> &lt;&lt; road[i] &lt;&lt; <span class="string">"=="</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>向量 vector 是一种对象实体, 能够容纳许多其他类型相同的元素, 因此又被称为容器。 与string相同, vector 同属于STL(Standard Template Library, 标准模板库)中的一种自定义的数据类型, 可以广义上认为是数组的增强版。</p><p>在使用它时, 需要包含头文件vector, <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vector 容器与数组相比其优点在于它能够根据需要随时自动调整自身的大小以便容下所要放入的元素。此外, vector 也提供了许多的方法来对自身进行操作。</div><div class="line">```c++</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;vector&gt;</div><div class="line">using namespace std;</div><div class="line">int main()</div><div class="line">&#123;</div><div class="line">vector&lt;vector&lt;int&gt;&gt; b(3, vector&lt;int&gt;(5));</div><div class="line">cout &lt;&lt; &quot;now set the 2 dimension vector:\n&quot;;</div><div class="line">for(int i = 0; i&lt;b.size(); i++)</div><div class="line">&#123;</div><div class="line">for(int j = 0; j&lt;b[0].size(); j++)</div><div class="line">&#123;</div><div class="line">cin &gt;&gt; b[i][j];</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">cout &lt;&lt; &quot;here is the result&quot; &lt;&lt; endl;</div><div class="line">for(int i = 0; i&lt;b.size(); i++)</div><div class="line">&#123;</div><div class="line">for(int j = 0; j&lt;b[0].size(); j++)</div><div class="line">&#123;</div><div class="line">cout &lt;&lt; b[i][j] &lt;&lt; &quot; &quot;;</div><div class="line">&#125;</div><div class="line">cout &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下代码都是自己学习过程中敲的,想了想还是记录下来比较好,虽然实现的很难堪,因为很多函数具体细节总是出错,所以都是用的最直白,但是也是最耗费资源的方式写下来的,没有用到vector,arraylist等等新型数组,因为总是写错,希望以后可以慢慢学习着使用这些数组,容器来写,慢慢练习.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>软件工程学习总结</title>
    <link href="http://yoursite.com/2017/11/11/nseblog/"/>
    <id>http://yoursite.com/2017/11/11/nseblog/</id>
    <published>2017-11-11T14:32:07.000Z</published>
    <updated>2017-12-10T14:40:57.822Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p> 《软件工程（C编码实践篇）》MOOC课程<a href="http://mooc.study.163.com/course/USTC-1000002006" target="_blank" rel="external">http://mooc.study.163.com/course/USTC-1000002006</a><br><a id="more"></a></p></blockquote><p><img src="https://i.imgur.com/rZIfa3a.jpg" alt=""></p><p> <strong>本学期上了孟老师的高级软件工程课,线上+线下实验的形式让我学到了很多东西,不仅仅是关于软件工程方面的知识,也学到了很多新技能,下面就讲讲自己这门课的收获吧</strong></p><hr><p>实验报告记录如下:</p><ol><li><a href="https://www.shiyanlou.com/courses/reports/1290300" title="实验一: 写一个hello world小程序实验要求" target="_blank" rel="external">https://www.shiyanlou.com/courses/reports/1290300</a></li><li><a href="https://www.shiyanlou.com/courses/reports/1291328" title="命令行菜单小程序V1.0" target="_blank" rel="external">https://www.shiyanlou.com/courses/reports/1291328</a></li><li><a href="https://www.shiyanlou.com/courses/reports/1293251" title="基本的模块化设计" target="_blank" rel="external">https://www.shiyanlou.com/courses/reports/1293251</a></li><li><a href="http://njghappy.me/2017/10/10/Nse4/" title="可重用模块的接口设计" target="_blank" rel="external">http://njghappy.me/2017/10/10/Nse4/</a></li><li><a href="http://njghappy.me/2017/10/21/lab5/" title="callback实现可重入模块的接口设计" target="_blank" rel="external">http://njghappy.me/2017/10/21/lab5/</a></li><li><a href="http://njghappy.me/2017/11/04/lab7/" title="子系统的可重用设计" target="_blank" rel="external">http://njghappy.me/2017/11/04/lab7/</a><blockquote><p>实验代码可见<a href="https://github.com/Niejinge/NSE" title="高软实验github地址" target="_blank" rel="external">https://github.com/Niejinge/NSE</a></p></blockquote></li></ol><hr><p>上面是我们整个学习过程的实验流程,可以看出实验标题很简洁,内容又很实用,从短短七个实验里,感觉自己学到了很多东西。</p><pre><code>#include &lt;stdio.h&gt;int main(){printf(&quot;hello world!\n&quot;);return 0;}</code></pre><p>就从helloworld小程序开始吧,实验从浅入深,使我们逐渐学习到了软件工程学里重要的知识点,通过简单的代码实例,也能使我们不至于承受太大的压力,就能掌握软件工程的知识,感觉非常好。在一点一滴的实验中，我学到了代码书写规范，掌握了四个空格缩进，代码块大括号另起一行的好处。比如最简单的<code>helloworld</code>程序,别看就这几行程序,其中要遵循的小细节就有很多。  </p><ul><li>　 知道了注释的重要性，这些小细节不仅是对自己，也是对别人的一种态度，使大家都更好的去看代码，理解代码。<br>　 通过实验,增强了对数据结构与模块化的理解,通过把程序模块化,可以使我们的程序更加可读,易于更新。而且学习了接口的概念,通过把功能封装进函数,只暴露出接口,可以使我们的程序更加健壮,这些都是提高我们代码能力的重要知识。<br>　 而且通过观看老师的视频,也意识到了多线程安全的问题,通过小实验,能更加深入的理解对于代码可重入和多线程的问题,并在实验中不断遇到问题,解决问题, 也就在不断的进步。<br>　 高级软件工程感觉很充实，学到了不少知识，而且，对于linux和github的运用也使我开始习惯去用linux写代码,并把自己的代码上传到github,这两大利器不管对自己在别的科目上的学习,还是以后在工作中,都大有好处。 </li></ul><hr><ul><li>　 看到自己的一步步走来,感触很深,从最开始的懵懵懂懂,到现在进步了许多,实验中遇到了很多问题,在总结错误,提高自己的同时也留下了很多回忆。<br>　 孟老师人很好,讲起课来很和蔼,没有架子,课上还会通过很多有趣的生活小例子来加强我们的理解。老师只是给我们指导作用，关键还是得自己主动去思考，去学习，只有自己态度好了，才能学好。可能每个人的看法不同，但是没有什么是完美的，不可能每个人都满意。软件工程这门课就是培养我们对于软件开发的思想，提高代码规范，这点感觉课上内容已经完全做到了，只有自己放平心态，静下心来好好完成老师布置的任务，才能学好这门课。从开始到结束，在不知不觉中，进步了许多，软件工程思想是一点点培养起来的，必须通过实践，才能理解好，提高自己的能力。<br>　 通过高软,可以说让自己对软件工程这个专业也有了更加深入的认识,毕竟以前是跨专业进来的,这对以后的学习带来了很多方面的好处,积累了很多经验,在错误中成长,让自己以后在遇到新问题,新知识时更加从容不迫。唯一感到遗憾的是自己的基础还是不扎实，软件工程中像设计模式，软件设计流程等等知识认识太浅，还需要自己后续多读书去提高自己。</li></ul><blockquote><p>原创作品转载请注明出处</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 《软件工程（C编码实践篇）》MOOC课程&lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000002006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mooc.study.163.com/course/USTC-1000002006&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="高软实验报告" scheme="http://yoursite.com/tags/%E9%AB%98%E8%BD%AF%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>高软实验报告7</title>
    <link href="http://yoursite.com/2017/11/04/lab7/"/>
    <id>http://yoursite.com/2017/11/04/lab7/</id>
    <published>2017-11-04T14:32:07.000Z</published>
    <updated>2017-11-07T13:42:42.957Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>网易云课堂昵称: 镍铬合金</p><p>学号:sa17225259</p><p>github: <a href="https://github.com/Niejinge/NSE" title="https://github.com/Niejinge/NSE" target="_blank" rel="external">https://github.com/Niejinge/NSE</a></p><p> 《软件工程（C编码实践篇）》MOOC课程作业<a href="http://mooc.study.163.com/course/USTC-1000002006" target="_blank" rel="external">http://mooc.study.163.com/course/USTC-1000002006</a> 】<br><a id="more"></a></p></blockquote><hr><p><strong>实验要求</strong></p><ol><li>为menu子系统设计接口，并写用户范例代码来实现原来的功能；</li><li>使用make和make clean来编译程序和清理自动生成的文件；</li><li>使menu子系统支持带参数的复杂命令，并在用户范例代码中自定义一个带参数的复杂命令；</li><li>可以使用getopt函数获取命令行参数。</li></ol><ul><li><strong>实验思路: 本次实验难度不高,在理解原理的情况下,实现试验要求,主要是学习了新知识,通过新建一个Makefile文件,可以一键实现很多功能,这对我们的代码简洁性,以及在编译链接阶段很有好处.</strong></li></ul><h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><ul><li><p>编写<code>menu.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int MenuConfig(char *cmd, char *desc, int (*handler)(int argc, char *argv[]));</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ExecuteMenu</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></li><li><p>编写<code>menu.c</code></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linktable.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"menu.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_MAX_LEN 128</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DESC_LEN    1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_NUM     10</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* data struct and its operations */</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DataNode</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    tLinkTableNode * pNext;</div><div class="line">    <span class="keyword">char</span>*   cmd;</div><div class="line">    <span class="keyword">char</span>*   desc;</div><div class="line">    <span class="keyword">int</span>     (*handler)(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[]);</div><div class="line">&#125; tDataNode;</div><div class="line"></div><div class="line">tLinkTable * head = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchCondition</span><span class="params">(tLinkTableNode * pLinkTableNode, <span class="keyword">void</span>* args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    tDataNode * pNode = (tDataNode *)pLinkTableNode;</div><div class="line">    <span class="keyword">char</span>* cmd = (<span class="keyword">char</span>*)args;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(pNode-&gt;cmd, cmd) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>  SUCCESS;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> FAILURE;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function">tDataNode* <span class="title">FindCmd</span><span class="params">(tLinkTable * head, <span class="keyword">char</span> * cmd)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span>  (tDataNode*)SearchLinkTableNode(head,SearchCondition,(<span class="keyword">void</span>*)cmd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ShowAllCmd</span><span class="params">(tLinkTable * head)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    tDataNode * pNode = (tDataNode*)GetLinkTableHead(head);</div><div class="line">    <span class="keyword">while</span>(pNode != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s - %s\n"</span>, pNode-&gt;cmd, pNode-&gt;desc);</div><div class="line">        pNode = (tDataNode*)GetNextLinkTableNode(head,(tLinkTableNode *)pNode);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">help</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=========================================\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"List all the cmd of menu program:\n"</span>);</div><div class="line">    ShowAllCmd(head);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"=========================================\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int MenuConfig(char* cmd, char* desc, int (*handler)(int argc, char* argv[]))</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        head = CreateLinkTable();</div><div class="line">        tDataNode* pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">        pNode-&gt;cmd = <span class="string">"help"</span>;</div><div class="line">        pNode-&gt;desc = <span class="string">"List all the cmd of menu"</span>;</div><div class="line">        pNode-&gt;handler = help;</div><div class="line">        AddLinkTableNode(head, (tLinkTableNode *)pNode);</div><div class="line">    &#125;</div><div class="line">    tDataNode* pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = cmd;</div><div class="line">    pNode-&gt;desc = desc;</div><div class="line">    pNode-&gt;handler = handler;</div><div class="line">    AddLinkTableNode(head, (tLinkTableNode *)pNode);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ExecuteMenu</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> input[CMD_MAX_LEN];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"If you need help, please type help\n"</span>);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line"><span class="keyword">int</span> argc = <span class="number">0</span>;</div><div class="line"><span class="keyword">char</span>* argv[CMD_MAX_LEN];</div><div class="line"><span class="keyword">char</span>* cmd = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"cmd&gt;&gt;"</span>);</div><div class="line">    cmd = fgets(input, CMD_MAX_LEN, <span class="built_in">stdin</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(cmd == <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*converts cmd to agrc and agrv*/</span></div><div class="line">cmd = strtok(cmd, <span class="string">" "</span>);</div><div class="line"><span class="keyword">while</span>(cmd != <span class="literal">NULL</span> &amp;&amp; argc &lt; CMD_MAX_LEN)</div><div class="line">&#123;</div><div class="line">    argv[argc] = cmd;</div><div class="line">    argc ++;</div><div class="line">            cmd = strtok(<span class="literal">NULL</span>, <span class="string">" "</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(argc ==  <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(argv[<span class="number">0</span>]);</div><div class="line">    *(argv[<span class="number">0</span>] + (len - <span class="number">1</span>)) = <span class="string">'\0'</span>;</div><div class="line">&#125;</div><div class="line">    tDataNode* p = FindCmd(head, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"the cmd you input isn't exist\n"</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(p-&gt;handler != <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            p-&gt;handler(argc, argv);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>编写<code>Makefile</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CC_PTHREAD_FLAGS= -lpthread</div><div class="line">CC_FLAGS= -c</div><div class="line">CC_OUTPUT_FLAGS= -o</div><div class="line">CC= -gcc</div><div class="line">RM= rm</div><div class="line">RM_FLAGS= -f</div><div class="line"></div><div class="line">TARGET = test</div><div class="line">OBJS = linktable.o menu.o test.o</div><div class="line"></div><div class="line">all:$(OBJS)</div><div class="line">$(CC) $(CC_OUTPUT_FLAGS) $(TARGET) $(OBJS)</div><div class="line"></div><div class="line">.c.o:</div><div class="line">$(CC) $(CC_FLAGS) $&lt;</div><div class="line"></div><div class="line">clean:</div><div class="line">$(RM) $(RM_FLAGS) $(OBJS) $(TARGET) *.bak</div></pre></td></tr></table></figure><ul><li>编写<code>test.c</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"menu.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linktable.h"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">quit</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">quit</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,r;</div><div class="line">    <span class="keyword">if</span>(argc !=<span class="number">3</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"warning input 2 numbers\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    r=atoi(argv[<span class="number">1</span>])+atoi(argv[<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"result is %d\n"</span>,r);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> i,r;</div><div class="line">    <span class="keyword">if</span>(argc !=<span class="number">3</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"warning input 2 numbers\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    r=atoi(argv[<span class="number">1</span>])-atoi(argv[<span class="number">2</span>]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"result is %d\n"</span>,r);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</div><div class="line">    MenuConfig(<span class="string">"quit"</span>,<span class="string">"quit from the menu program"</span>, quit);</div><div class="line">    MenuConfig(<span class="string">"add"</span>,<span class="string">"here is a add demo"</span>, add);</div><div class="line">    MenuConfig(<span class="string">"sub"</span>,<span class="string">"this is a sub demo"</span>, sub);</div><div class="line"></div><div class="line">    ExecuteMenu();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>linktable.h 和linktable.c与上次实验一样,所以就不贴上来了,具体可见github</p></blockquote><ul><li>试验结果</li></ul><p>运行截图如下:<br><img src="https://i.imgur.com/Sji7jtt.jpg" alt=""></p><ul><li>提交到github代码库<br><img src="https://i.imgur.com/OB8YGwd.jpg" alt=""></li></ul><hr><ul><li>试验总结</li></ul><p>学习了一些新东西,相信对以后会很有帮助,比如makefile, strtok, getopt等等. 但是实验中还是出现了很多问题,比如之前提交到代码库一直没有问题,这次突然就提交不了了,具体是关于分支master之前提交过,又改变了本地库之后再次提交出问题,百度也没找出答案,心里很烦躁,好在最后解决了问题,美中不足的是没有去研究为什么会出问题,瞎解决就完事了,希望下次不要再遇到,不然还是过不了这个坎.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网易云课堂昵称: 镍铬合金&lt;/p&gt;
&lt;p&gt;学号:sa17225259&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/Niejinge/NSE&quot; title=&quot;https://github.com/Niejinge/NSE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Niejinge/NSE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 《软件工程（C编码实践篇）》MOOC课程作业&lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000002006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mooc.study.163.com/course/USTC-1000002006&lt;/a&gt; 】&lt;br&gt;
    
    </summary>
    
    
      <category term="高软实验报告" scheme="http://yoursite.com/tags/%E9%AB%98%E8%BD%AF%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>高软实验报告5(更改)</title>
    <link href="http://yoursite.com/2017/10/21/lab5/"/>
    <id>http://yoursite.com/2017/10/21/lab5/</id>
    <published>2017-10-21T14:46:09.000Z</published>
    <updated>2017-11-12T10:26:37.538Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>网易云课堂昵称: 镍铬合金</p><p>学号:sa17225259</p><p>github: <a href="https://github.com/Niejinge/NSE" title="https://github.com/Niejinge/NSE" target="_blank" rel="external">https://github.com/Niejinge/NSE</a></p><p> 《软件工程（C编码实践篇）》MOOC课程作业<a href="http://mooc.study.163.com/course/USTC-1000002006" target="_blank" rel="external">http://mooc.study.163.com/course/USTC-1000002006</a> 】<br><a id="more"></a></p></blockquote><hr><p><strong>实验要求</strong></p><ol><li>给lab5-1.tar.gz找bug，quit命令无法运行的bug</li><li>利用callback函数参数使Linktable的查询接口更加通用</li><li>注意接口的信息隐藏</li></ol><p>　 本次实验主要是从老师给的源代码里修改bug, 并优化代码,使用<code>caLlback</code>来完成,最后实现接口的隐藏,总体还是比较简单的,因为不用自己去写代码,只需要好好理解老师的讲解,并修改好即可。</p><hr><ul><li><p>修改bug</p><p>　首先下载老师的代码并运行，发现quit命令不能识别，如下图所示：<br><img src="https://i.imgur.com/3mPDbpK.jpg" alt=""></p></li></ul><p>　 经过分析，发现在<code>inktable.c</code>中<code>SearchLinkTableNode</code>函数中有错误，while循环中最后一次循环到<code>pLinkTable-&gt;ptail</code>就终止了，因此quit作为最后一条命令不能识别。修改为NULL，就可以了，修改后代码如下：</p><pre><code>tLinkTableNode * SearchLinkTableNode(tLinkTable *pLinkTable, int Conditon(tLinkTableNode * pNode, void* args), void* args){    if(pLinkTable == NULL || Conditon == NULL)    {        return NULL;    }    tLinkTableNode * pNode = pLinkTable-&gt;pHead;    while(pNode != NULL)    {            if(Conditon(pNode, args) == SUCCESS)        {            return pNode;                            }        pNode = pNode-&gt;pNext;    }    return NULL;}</code></pre><p>再运行程序，错误消失：<br><img src="https://i.imgur.com/5KWhnjU.jpg" alt=""></p><ul><li>使用<code>callback</code>优化代码</li></ul><p>　 对于    callback,就是被调用函数还要利用调用者提供信息，来完成函数的实现。现在我们就来对我们的代码完成优化，通过引入callback来对代码进行修改，以降低代码的耦合程度。<br>　 之前的代码中，在menu.c中，<code>char cmd[CMD_MAX_LEN];</code>作为全局变量出现在main函数体外，这虽然实现了我们的目的，但是使用全局变量是不好的，这会无形之间增加代码之间的耦合程度。所以，我们要通过引入callback来降低耦合，使我们的代码更加完美。<br>为了实现我们的目的，通过在<code>SearchCondition</code>中引入args参数，可以实现把cmd的声明放在main函数体内，具体代码如下：</p><pre><code>int SearchCondition(tLinkTableNode * pLinkTableNode, void* args){    char * cmd = (char*) args;    tDataNode * pNode = (tDataNode *)pLinkTableNode;    if(strcmp(pNode-&gt;cmd, cmd) == 0)    {        return  SUCCESS;      }    return FAILURE;           }</code></pre><p>这里修改之后，相关地方都需要修改，总共需要修改的地方还有：</p><pre><code>tDataNode* FindCmd(tLinkTable * head, char * cmd){    return  (tDataNode*)SearchLinkTableNode(head,SearchCondition, cmd);}</code></pre><p>linktable.h和linktable.c中相关代码也需要修改：具体修改就不一一赘述了。</p><p>linktable.h:</p><pre><code>tLinkTableNode * SearchLinkTableNode(tLinkTable *pLinkTable, int Conditon(tLinkTableNode * pNode, void* args), void* args);</code></pre><p>linktable.c:</p><pre><code>tLinkTableNode * SearchLinkTableNode(tLinkTable *pLinkTable, int Conditon(tLinkTableNode * pNode, void* args), void* args){    if(pLinkTable == NULL || Conditon == NULL)    {        return NULL;    }    tLinkTableNode * pNode = pLinkTable-&gt;pHead;    while(pNode != NULL)    {            if(Conditon(pNode, args) == SUCCESS)        {            return pNode;                            }        pNode = pNode-&gt;pNext;    }    return NULL;}</code></pre><ul><li>实现代码的隐藏<br>　 通过把头文件中数据结构的定义移到.c文件中，而在头文件仅实现结构的定义，就实现了代码的隐藏，只提供接口，提高了代码的健壮性。</li></ul><blockquote><p><strong>通过上面的优化，我们的代码基本要求已经实现了，试运行也没有出错，很高兴，接下来添加自己的几个小函数，然后运行一下，本次实验就宣告完毕了！</strong></p></blockquote><p>因为本次实验是老师提供的源代码，这里就不全贴出来了，具体代码详情可见github。这里就贴出<code>menu.c</code>的代码吧，因为这是改动最大的源文件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linktable.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Help</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quit</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dogBark</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">happy</span><span class="params">()</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_MAX_LEN 128</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DESC_LEN    1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_NUM    </span></div><div class="line"></div><div class="line"><span class="comment">/* data struct and its operations */</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DataNode</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    tLinkTableNode * pNext;</div><div class="line">    <span class="keyword">char</span>*   cmd;</div><div class="line">    <span class="keyword">char</span>*   desc;</div><div class="line">    <span class="keyword">int</span>     (*handler)();</div><div class="line">&#125; tDataNode;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchCondition</span><span class="params">(tLinkTableNode * pLinkTableNode, <span class="keyword">void</span>* args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> * cmd = (<span class="keyword">char</span>*) args;</div><div class="line">    tDataNode * pNode = (tDataNode *)pLinkTableNode;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(pNode-&gt;cmd, cmd) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>  SUCCESS;  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> FAILURE;       </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* find a cmd in the linklist and return the datanode pointer */</span></div><div class="line"><span class="function">tDataNode* <span class="title">FindCmd</span><span class="params">(tLinkTable * head, <span class="keyword">char</span> * cmd)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span>  (tDataNode*)SearchLinkTableNode(head,SearchCondition, cmd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* show all cmd in listlist */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ShowAllCmd</span><span class="params">(tLinkTable * head)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    tDataNode * pNode = (tDataNode*)GetLinkTableHead(head);</div><div class="line">    <span class="keyword">while</span>(pNode != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s - %s\n"</span>, pNode-&gt;cmd, pNode-&gt;desc);</div><div class="line">        pNode = (tDataNode*)GetNextLinkTableNode(head,(tLinkTableNode *)pNode);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitMenuData</span><span class="params">(tLinkTable ** ppLinktable)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    *ppLinktable = CreateLinkTable();</div><div class="line">    tDataNode* pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"help"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"Menu List:"</span>;</div><div class="line">    pNode-&gt;handler = Help;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"version"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"Menu Program V1.0"</span>;</div><div class="line">    pNode-&gt;handler = <span class="literal">NULL</span>; </div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"quit"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"Quit from Menu Program V1.0"</span>;</div><div class="line">    pNode-&gt;handler = Quit; </div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line"> </div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"dogBark"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"a dog bark at the midnight!"</span>;</div><div class="line">    pNode-&gt;handler = dogBark;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"eat"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"it's supper time, let's eat some food"</span>;</div><div class="line">    pNode-&gt;handler = eat;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"add"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"add two demo of numbers."</span>;</div><div class="line">    pNode-&gt;handler = add;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"sub"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"sub two demo of two numbers."</span>;</div><div class="line">    pNode-&gt;handler = sub;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"happy"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"keep smile in life everyday!"</span>;</div><div class="line">    pNode-&gt;handler = happy;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);   </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* menu program */</span></div><div class="line"></div><div class="line">tLinkTable * head = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> cmd[CMD_MAX_LEN];</div><div class="line">    InitMenuData(&amp;head); </div><div class="line">   <span class="comment">/* cmd line begins */</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Input a cmd number &gt; "</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmd);</div><div class="line">        tDataNode *p = FindCmd(head, cmd);</div><div class="line">        <span class="keyword">if</span>( p == <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"This is a wrong cmd!\n "</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s - %s\n"</span>, p-&gt;cmd, p-&gt;desc); </div><div class="line">        <span class="keyword">if</span>(p-&gt;handler != <span class="literal">NULL</span>) </div><div class="line">        &#123; </div><div class="line">            p-&gt;handler();</div><div class="line">        &#125;</div><div class="line">   </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Help</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ShowAllCmd(head);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quit</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dogBark</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Ruff! Ruff! Ruff ... !\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">eat</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"uh..! The meat is declicious!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"input two numbers:\n"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"x+y = %d\n"</span>, x+y);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"input two numbers:\n"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"x-y = %d\n"</span>, x-y);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">happy</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hahaheheheiheixixihouhouxiaxia!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><ul><li>实验结果</li></ul><p>通过<code>gcc linktable.c menu.c -o menu</code>生成可执行文件，然后通过命令<code>./menu</code>运行文件，结果如下：<br><img src="https://i.imgur.com/AJw91EW.jpg" alt=""></p><ul><li>提交代码到github<br><img src="https://i.imgur.com/Bgl8NMu.jpg" alt=""></li></ul><hr><ul><li>实验总结<br>　 通过本次实验，深入理解了callback的机制，软件工程不只是能写出能执行的代码，更关键的是代码调优，通过callback和实现接口信息的隐藏，可以使我们的代码更加通用，更加健壮。这是思想是需要慢慢培养的，要在平时练习中注意使用，提高调优能力。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网易云课堂昵称: 镍铬合金&lt;/p&gt;
&lt;p&gt;学号:sa17225259&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/Niejinge/NSE&quot; title=&quot;https://github.com/Niejinge/NSE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Niejinge/NSE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 《软件工程（C编码实践篇）》MOOC课程作业&lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000002006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mooc.study.163.com/course/USTC-1000002006&lt;/a&gt; 】&lt;br&gt;
    
    </summary>
    
    
      <category term="高软实验报告" scheme="http://yoursite.com/tags/%E9%AB%98%E8%BD%AF%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>高软实验报告5</title>
    <link href="http://yoursite.com/2017/10/21/lab5%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2017/10/21/lab5实验报告/</id>
    <published>2017-10-21T14:46:09.000Z</published>
    <updated>2017-11-05T02:19:11.531Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>网易云课堂昵称: 镍铬合金</p><p>学号:sa17225259</p><p>github: <a href="https://github.com/Niejinge/NSE" title="https://github.com/Niejinge/NSE" target="_blank" rel="external">https://github.com/Niejinge/NSE</a></p><p> 《软件工程（C编码实践篇）》MOOC课程作业<a href="http://mooc.study.163.com/course/USTC-1000002006" target="_blank" rel="external">http://mooc.study.163.com/course/USTC-1000002006</a> 】<br><a id="more"></a></p></blockquote><hr><p><strong>实验要求</strong></p><ol><li>给lab5-1.tar.gz找bug，quit命令无法运行的bug</li><li>利用callback函数参数使Linktable的查询接口更加通用</li><li>注意接口的信息隐藏</li></ol><p>　 本次实验主要是从老师给的源代码里修改bug, 并优化代码,使用<code>caLlback</code>来完成,最后实现接口的隐藏,总体还是比较简单的,因为不用自己去写代码,只需要好好理解老师的讲解,并修改好即可。</p><hr><ul><li><p>修改bug</p><p>　首先下载老师的代码并运行，发现quit命令不能识别，如下图所示：<br><img src="https://i.imgur.com/3mPDbpK.jpg" alt=""></p></li></ul><p>　 经过分析，发现在<code>inktable.c</code>中<code>SearchLinkTableNode</code>函数中有错误，while循环中最后一次循环到<code>pLinkTable-&gt;ptail</code>就终止了，因此quit作为最后一条命令不能识别。修改为NULL，就可以了，修改后代码如下：</p><pre><code>tLinkTableNode * SearchLinkTableNode(tLinkTable *pLinkTable, int Conditon(tLinkTableNode * pNode, void* args), void* args){    if(pLinkTable == NULL || Conditon == NULL)    {        return NULL;    }    tLinkTableNode * pNode = pLinkTable-&gt;pHead;    while(pNode != NULL)    {            if(Conditon(pNode, args) == SUCCESS)        {            return pNode;                            }        pNode = pNode-&gt;pNext;    }    return NULL;}</code></pre><p>再运行程序，错误消失：<br><img src="https://i.imgur.com/5KWhnjU.jpg" alt=""></p><ul><li>使用<code>callback</code>优化代码</li></ul><p>　 对于    callback,就是被调用函数还要利用调用者提供信息，来完成函数的实现。现在我们就来对我们的代码完成优化，通过引入callback来对代码进行修改，以降低代码的耦合程度。<br>　 之前的代码中，在menu.c中，<code>char cmd[CMD_MAX_LEN];</code>作为全局变量出现在main函数体外，这虽然实现了我们的目的，但是使用全局变量是不好的，这会无形之间增加代码之间的耦合程度。所以，我们要通过引入callback来降低耦合，使我们的代码更加完美。<br>为了实现我们的目的，通过在<code>SearchCondition</code>中引入args参数，可以实现把cmd的声明放在main函数体内，具体代码如下：</p><pre><code>int SearchCondition(tLinkTableNode * pLinkTableNode, void* args){    char * cmd = (char*) args;    tDataNode * pNode = (tDataNode *)pLinkTableNode;    if(strcmp(pNode-&gt;cmd, cmd) == 0)    {        return  SUCCESS;      }    return FAILURE;           }</code></pre><p>这里修改之后，相关地方都需要修改，总共需要修改的地方还有：</p><pre><code>tDataNode* FindCmd(tLinkTable * head, char * cmd){    return  (tDataNode*)SearchLinkTableNode(head,SearchCondition, cmd);}</code></pre><p>linktable.h和linktable.c中相关代码也需要修改：具体修改就不一一赘述了。</p><p>linktable.h:</p><pre><code>tLinkTableNode * SearchLinkTableNode(tLinkTable *pLinkTable, int Conditon(tLinkTableNode * pNode, void* args), void* args);</code></pre><p>linktable.c:</p><pre><code>tLinkTableNode * SearchLinkTableNode(tLinkTable *pLinkTable, int Conditon(tLinkTableNode * pNode, void* args), void* args){    if(pLinkTable == NULL || Conditon == NULL)    {        return NULL;    }    tLinkTableNode * pNode = pLinkTable-&gt;pHead;    while(pNode != NULL)    {            if(Conditon(pNode, args) == SUCCESS)        {            return pNode;                            }        pNode = pNode-&gt;pNext;    }    return NULL;}</code></pre><ul><li>实现代码的隐藏<br>　 通过把头文件中数据结构的定义移到.c文件中，而在头文件仅实现结构的定义，就实现了代码的隐藏，只提供接口，提高了代码的健壮性。</li></ul><blockquote><p><strong>通过上面的优化，我们的代码基本要求已经实现了，试运行也没有出错，很高兴，接下来添加自己的几个小函数，然后运行一下，本次实验就宣告完毕了！</strong></p></blockquote><p>因为本次实验是老师提供的源代码，这里就不全贴出来了，具体代码详情可见github。这里就贴出<code>menu.c</code>的代码吧，因为这是改动最大的源文件。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"linktable.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Help</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quit</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dogBark</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">happy</span><span class="params">()</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_MAX_LEN 128</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DESC_LEN    1024</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_NUM    </span></div><div class="line"></div><div class="line"><span class="comment">/* data struct and its operations */</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DataNode</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    tLinkTableNode * pNext;</div><div class="line">    <span class="keyword">char</span>*   cmd;</div><div class="line">    <span class="keyword">char</span>*   desc;</div><div class="line">    <span class="keyword">int</span>     (*handler)();</div><div class="line">&#125; tDataNode;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SearchCondition</span><span class="params">(tLinkTableNode * pLinkTableNode, <span class="keyword">void</span>* args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> * cmd = (<span class="keyword">char</span>*) args;</div><div class="line">    tDataNode * pNode = (tDataNode *)pLinkTableNode;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(pNode-&gt;cmd, cmd) == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span>  SUCCESS;  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> FAILURE;       </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* find a cmd in the linklist and return the datanode pointer */</span></div><div class="line"><span class="function">tDataNode* <span class="title">FindCmd</span><span class="params">(tLinkTable * head, <span class="keyword">char</span> * cmd)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span>  (tDataNode*)SearchLinkTableNode(head,SearchCondition, cmd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* show all cmd in listlist */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ShowAllCmd</span><span class="params">(tLinkTable * head)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    tDataNode * pNode = (tDataNode*)GetLinkTableHead(head);</div><div class="line">    <span class="keyword">while</span>(pNode != <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s - %s\n"</span>, pNode-&gt;cmd, pNode-&gt;desc);</div><div class="line">        pNode = (tDataNode*)GetNextLinkTableNode(head,(tLinkTableNode *)pNode);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitMenuData</span><span class="params">(tLinkTable ** ppLinktable)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    *ppLinktable = CreateLinkTable();</div><div class="line">    tDataNode* pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"help"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"Menu List:"</span>;</div><div class="line">    pNode-&gt;handler = Help;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"version"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"Menu Program V1.0"</span>;</div><div class="line">    pNode-&gt;handler = <span class="literal">NULL</span>; </div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"quit"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"Quit from Menu Program V1.0"</span>;</div><div class="line">    pNode-&gt;handler = Quit; </div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line"> </div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"dogBark"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"a dog bark at the midnight!"</span>;</div><div class="line">    pNode-&gt;handler = dogBark;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"eat"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"it's supper time, let's eat some food"</span>;</div><div class="line">    pNode-&gt;handler = eat;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"add"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"add two demo of numbers."</span>;</div><div class="line">    pNode-&gt;handler = add;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"sub"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"sub two demo of two numbers."</span>;</div><div class="line">    pNode-&gt;handler = sub;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);</div><div class="line">    pNode = (tDataNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tDataNode));</div><div class="line">    pNode-&gt;cmd = <span class="string">"happy"</span>;</div><div class="line">    pNode-&gt;desc = <span class="string">"keep smile in life everyday!"</span>;</div><div class="line">    pNode-&gt;handler = happy;</div><div class="line">    AddLinkTableNode(*ppLinktable,(tLinkTableNode *)pNode);   </div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* menu program */</span></div><div class="line"></div><div class="line">tLinkTable * head = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> cmd[CMD_MAX_LEN];</div><div class="line">    InitMenuData(&amp;head); </div><div class="line">   <span class="comment">/* cmd line begins */</span></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Input a cmd number &gt; "</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmd);</div><div class="line">        tDataNode *p = FindCmd(head, cmd);</div><div class="line">        <span class="keyword">if</span>( p == <span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"This is a wrong cmd!\n "</span>);</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%s - %s\n"</span>, p-&gt;cmd, p-&gt;desc); </div><div class="line">        <span class="keyword">if</span>(p-&gt;handler != <span class="literal">NULL</span>) </div><div class="line">        &#123; </div><div class="line">            p-&gt;handler();</div><div class="line">        &#125;</div><div class="line">   </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Help</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    ShowAllCmd(head);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quit</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dogBark</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Ruff! Ruff! Ruff ... !\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">eat</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"uh..! The meat is declicious!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"input two numbers:\n"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"x+y = %d\n"</span>, x+y);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"input two numbers:\n"</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"x-y = %d\n"</span>, x-y);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">happy</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hahaheheheiheixixihouhouxiaxia!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><ul><li>实验结果</li></ul><p>通过<code>gcc linktable.c menu.c -o menu</code>生成可执行文件，然后通过命令<code>./menu</code>运行文件，结果如下：<br><img src="https://i.imgur.com/AJw91EW.jpg" alt=""></p><ul><li>提交代码到github<br><img src="https://i.imgur.com/Bgl8NMu.jpg" alt=""></li></ul><hr><ul><li>实验总结<br>　 通过本次实验，深入理解了callback的机制，软件工程不只是能写出能执行的代码，更关键的是代码调优，通过callback和实现接口信息的隐藏，可以使我们的代码更加通用，更加健壮。这是思想是需要慢慢培养的，要在平时练习中注意使用，提高调优能力。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;网易云课堂昵称: 镍铬合金&lt;/p&gt;
&lt;p&gt;学号:sa17225259&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/Niejinge/NSE&quot; title=&quot;https://github.com/Niejinge/NSE&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Niejinge/NSE&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 《软件工程（C编码实践篇）》MOOC课程作业&lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000002006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mooc.study.163.com/course/USTC-1000002006&lt;/a&gt; 】&lt;br&gt;
    
    </summary>
    
    
      <category term="高软实验报告" scheme="http://yoursite.com/tags/%E9%AB%98%E8%BD%AF%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>ceshi</title>
    <link href="http://yoursite.com/2017/10/10/ceshi/"/>
    <id>http://yoursite.com/2017/10/10/ceshi/</id>
    <published>2017-10-10T09:55:57.000Z</published>
    <updated>2017-11-03T11:53:02.534Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><pre><code>天昏地暗雨磅礴,万里无云风雨声.草木摇摆身坚挺,只因心中一盏灯.</code></pre><blockquote><p>哈哈,其实我是一个被所有其他科目耽误的文学家…<br><img src="https://i.imgur.com/T7jyyVv.jpg" alt="图片显示吗？">　 　 　 　</p></blockquote><p> 　 　 　 　 　 　 　 　 　 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;pre&gt;&lt;code&gt;天昏地暗雨磅礴,
万里无云风雨声.
草木摇摆身坚挺,
只因心中一盏灯.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;哈哈,其实我是一个被所有其他
      
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>软件工程(C编码实践篇)实验报告</title>
    <link href="http://yoursite.com/2017/10/10/Nse4/"/>
    <id>http://yoursite.com/2017/10/10/Nse4/</id>
    <published>2017-10-10T09:52:06.000Z</published>
    <updated>2017-10-14T10:30:42.963Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="实验四：用可重用的链表模块来实现命令行菜单小程序V2-5"><a href="#实验四：用可重用的链表模块来实现命令行菜单小程序V2-5" class="headerlink" title="实验四：用可重用的链表模块来实现命令行菜单小程序V2.5"></a>实验四：用可重用的链表模块来实现命令行菜单小程序V2.5</h3><blockquote><p><em>网易云课堂昵称：镍铬合金</em></p><p><em>软件工程（C编码实践篇）》MOOC课程作业<a href="http://mooc.study.163.com/course/USTC-1000002006" target="_blank" rel="external">http://mooc.study.163.com/course/USTC-1000002006</a></em></p><p><a href="https://github.com/Niejinge/NSE" title="我的github地址" target="_blank" rel="external">https://github.com/Niejinge/NSE</a></p></blockquote><a id="more"></a><h3 id="实验过程和思路"><a href="#实验过程和思路" class="headerlink" title="实验过程和思路:"></a><strong>实验过程和思路:</strong></h3><p>　 本次实验看似代码量很大,其实主程序还是上一次实验的代码,只要实现一个可重用的接口就可以了。一个可重用的接口可以方便编程时的数据结构的编写，其中用到了数据表，节点表等数据结构用法，通过<br>把这些数据结构组合到一起，实现基本的增删改查，然后当程序中需要使用此类数据结构时，当作接口进行<br>调用就行了，初始化后就能方便我们程序的实现。</p><h3 id="实验过程和截图："><a href="#实验过程和截图：" class="headerlink" title="实验过程和截图："></a><strong>实验过程和截图：</strong></h3><ul><li>编写头文件linktable.h</li></ul><p>部分截图如下：<br><img src="https://i.imgur.com/3oJKhJ4.jpg" alt=""><br><img src="https://i.imgur.com/UNNBGqq.jpg" alt=""><br>部分代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _LINK_TABLE_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _LINK_TABLE_H_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SUCCESS 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FAILURE (-1)</span></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkTableNode</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkTableNode</span> *<span class="title">pNext</span>;</span></div><div class="line">&#125;tLinkTableNode;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkTable</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    tLinkTableNode *pHead;</div><div class="line">    tLinkTableNode *pTail;</div><div class="line">    <span class="keyword">int</span>     SumOfNode;</div><div class="line">&#125;tLinkTable;</div><div class="line"></div><div class="line"><span class="function">tLinkTable *<span class="title">CreateLinkTable</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteLinkTable</span><span class="params">(tLinkTable *pLinkTable)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">AddLinkTableNode</span><span class="params">(tLinkTable *pLinkTable,tLinkTableNode *pNode)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteLinkTableNode</span><span class="params">(tLinkTable *pLinkTable,tLinkTableNode *pNode)</span></span>;</div><div class="line"><span class="function">tLinkTableNode *<span class="title">GetLinkTableHead</span><span class="params">(tLinkTable *pLinkTable)</span></span>;</div><div class="line"><span class="function">tLinkTableNode *<span class="title">GetNextLinkTableNode</span><span class="params">(tLinkTable *pLinkTable,tLinkTableNode *pNode)</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><ul><li>编写linktable.c</li></ul><p>部分截图如下：<br><img src="https://i.imgur.com/hOUj0iV.jpg" alt=""><br>部分代码如下<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function">tLinkTable *<span class="title">CreateLinkTable</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    tLinkTable *pLinkTable=(tLinkTable*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(tLinkTable));</div><div class="line">    pLinkTable-&gt;pHead=<span class="literal">NULL</span>;</div><div class="line">    pLinkTable-&gt;SumOfNode=<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> pLinkTable;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteLInkTable</span><span class="params">(tLinkTable *pLinkTable)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">if</span>(pLinkTable ==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">         <span class="keyword">return</span> FAILURE;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(pLinkTable-&gt;pHead ==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">free</span>(pLinkTable);</div><div class="line">        <span class="keyword">return</span> SUCCESS;</div><div class="line">    &#125;</div><div class="line">    tLinkTableNode *pNode=GetLinkTableHead(pLinkTable);</div><div class="line">    tLinkTableNode *pre;</div><div class="line">    <span class="keyword">while</span>(pNode !=<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        pre=pNode;</div><div class="line">        pNode=GetNextLinkTableNode(pLinkTable,pNode);</div><div class="line">        <span class="built_in">free</span>(pre);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">free</span>(pNode);</div><div class="line">    <span class="keyword">return</span> SUCCESS;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>编写主函数main.c</li></ul><p>部分截图如下</p><p><img src="https://i.imgur.com/IwPMLlT.jpg" alt=""><br><img src="https://i.imgur.com/h3gygt4.jpg" alt=""><br>部分代码如下:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    InitMenu(&amp;head);</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">char</span> cmd[CMD_MAX_LEN];</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"please input a command-&gt;"</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, cmd);</div><div class="line">        tDataNode *p = FindCmd(head, cmd);</div><div class="line">        <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</div><div class="line">        &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"this is a wrong cmd!\n"</span>);</div><div class="line">    <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"><span class="built_in">printf</span>(<span class="string">"%s - %s:\n"</span>, p-&gt;cmd, p-&gt;desc);</div><div class="line"><span class="keyword">if</span>(p-&gt;handler != <span class="literal">NULL</span>)</div><div class="line">&#123;</div><div class="line">    p-&gt;handler();</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"====================================\n"</span>);</div><div class="line">&#125;</div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>把代码推送到github代码库<br><img src="https://i.imgur.com/PMbVW5Y.jpg" alt=""></li><li>实验结果截图如下：<br><img src="https://i.imgur.com/A0aNHpZ.jpg" alt=""></li></ul><p><strong>具体代码参见github</strong></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title=" 实验总结"></a> 实验总结</h2><p>　 通过本次实验进一步提高了自己在代码中的熟练程度,也吸取了一些经验教训。Bug是伴随我们写代码过程中的,很难避免出现错误,因此不能害怕自己会出错,关键是要学习怎么去找到错误并改正,这个真的很重要,本次实验中一个小bug我就找了一个多小时才发现,因此要学习bug查找能力,这能大大提高我们编写程序的效率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实验四：用可重用的链表模块来实现命令行菜单小程序V2-5&quot;&gt;&lt;a href=&quot;#实验四：用可重用的链表模块来实现命令行菜单小程序V2-5&quot; class=&quot;headerlink&quot; title=&quot;实验四：用可重用的链表模块来实现命令行菜单小程序V2.5&quot;&gt;&lt;/a&gt;实验四：用可重用的链表模块来实现命令行菜单小程序V2.5&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;网易云课堂昵称：镍铬合金&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;软件工程（C编码实践篇）》MOOC课程作业&lt;a href=&quot;http://mooc.study.163.com/course/USTC-1000002006&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mooc.study.163.com/course/USTC-1000002006&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Niejinge/NSE&quot; title=&quot;我的github地址&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Niejinge/NSE&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="高软实验报告" scheme="http://yoursite.com/tags/%E9%AB%98%E8%BD%AF%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>分别用c++, java,和python简单的实现HelloWorld.</title>
    <link href="http://yoursite.com/2017/10/08/%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8B%E5%90%A7/"/>
    <id>http://yoursite.com/2017/10/08/正式开始吧/</id>
    <published>2017-10-08T14:00:23.000Z</published>
    <updated>2017-10-11T10:15:39.440Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h2 id="搭建完博客有本个月了-一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧"><a href="#搭建完博客有本个月了-一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧" class="headerlink" title=" 搭建完博客有本个月了,一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧"></a> <strong>搭建完博客有本个月了,一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧</strong></h2><blockquote><p><em>我是个半路出家的菜鸟,跨行来到程序世界,懵懵懂懂,还有很多地方要去学习,这个地方就用自己目前刚开始学习的三种语言分别来实现一下helloworld吧,哈哈!</em></p></blockquote><ul><li>c++</li><li>java</li><li>python</li></ul><p>这三个语言都学得很浅,仅限于能写Helloworld的水平<br><a id="more"></a></p><ul><li>c++</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"helloworld"</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>具体代码截图如下:<br><img src="https://i.imgur.com/dH3Kjnx.jpg" alt=""></p><p>运行结果如下:<br><img src="https://i.imgur.com/f6ZUycw.jpg" alt=""></p><ul><li>java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">System.out.println(<span class="string">"helloworld"</span>);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>具体代码截图如下:<br><img src="https://i.imgur.com/bN4JkhZ.jpg" alt=""></p><p>运行结果如下:<br><img src="https://i.imgur.com/ZVn0cjp.jpg" alt=""></p><ul><li>python</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'helloworld'</span></div></pre></td></tr></table></figure><p>具体代码截图如下:</p><p><img src="https://i.imgur.com/gmUFRy6.jpg" alt=""></p><p>运行结果如下:</p><p><img src="https://i.imgur.com/tJRUwwc.jpg" alt=""></p><p>好啦,就是这么简洁</p><blockquote><p>对于这三种语言,据我目前了解,c++和java是编译型面向对象语言,java用的包比较多,用起来容易些,c++学好了用起来很强大。而python是一种解释型语言,语法从上面例子就可以看出来很简单,就我来看,是一种写起来简单,好理解,但是执行效率稍低的一种语言,但是目前硬件发展速度很快,性能方面的差距不明显,然而简洁易写使其很受欢迎,也是当下越来越流行的一种语言。</p></blockquote><p>OK,就写到这里吧,该睡觉了,晚安!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建完博客有本个月了-一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧&quot;&gt;&lt;a href=&quot;#搭建完博客有本个月了-一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧&quot; class=&quot;headerlink&quot; title=&quot; 搭建完博客有本个月了,一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧&quot;&gt;&lt;/a&gt; &lt;strong&gt;搭建完博客有本个月了,一直懒的写。因为自己文学方面有点差，不知道去写啥，从何开始，但是这样搭建博客就没有意义了。。。万事开头难，我相信，坚持下去，一定会有收获的，嗯，那就开始吧&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;我是个半路出家的菜鸟,跨行来到程序世界,懵懵懂懂,还有很多地方要去学习,这个地方就用自己目前刚开始学习的三种语言分别来实现一下helloworld吧,哈哈!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;c++&lt;/li&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;li&gt;python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这三个语言都学得很浅,仅限于能写Helloworld的水平&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>湿乎乎的话题搬运一篇,试试bug解决了没有?</title>
    <link href="http://yoursite.com/2017/09/23/myblog2/"/>
    <id>http://yoursite.com/2017/09/23/myblog2/</id>
    <published>2017-09-23T12:24:22.000Z</published>
    <updated>2017-10-10T09:40:31.961Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><blockquote><p>搬运来自虎扑的一篇文章来练练手吧</p></blockquote><p><a href="https://bbs.hupu.com/20276224.html" target="_blank" rel="external">21世纪始终位于第一梯队的马刺，哪些球员算得上他的克星</a></p><h2 id="作者：神经病未见好转"><a href="#作者：神经病未见好转" class="headerlink" title="作者：神经病未见好转"></a>作者：神经病未见好转</h2><h3 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h3><p>进入21世纪以来，马刺每年都进入季后赛，<br>99-00赛季，马刺取得了53胜29负的战绩，马刺在季后赛第一轮以1比3不敌太阳（邓肯半月板撕裂无缘季后赛）。<br>2000-01赛季，马刺取得了58胜24负的佳绩。季后赛第一轮3比1淘汰森林狼，西部半决赛4比1淘汰小牛。西部决赛中，马刺被当时如日中天的湖人队横扫<br>2001-02赛季，马刺再次取得58胜24负的战绩，邓肯获得常规赛MVP。西部半决赛马刺以1比4不敌湖人队。<br>2002-03赛季  马刺取得了60胜22负的常规赛成绩，季后赛第一轮，马刺以4比2淘汰太阳。西部半决赛4比2淘汰老对手湖人，西部决赛4比2淘汰小牛。总决赛，马刺击败篮网，赢得第二座NBA总冠军奖杯。<br>2003-04赛季  马刺4场横扫孟菲斯灰熊队。第二轮，马刺2:4湖人队。<br>2004-05赛季，以59胜23负的战绩结束常规赛 马刺以4比1轻取丹佛掘金队，4比2击败西雅图超音速队，4比1淘汰菲尼克斯太阳队。总决赛4:3底特律活塞队<br><a id="more"></a><br>2005-06赛季，马刺得到63胜19负。季后赛首轮马刺4比2淘汰国王队。西部半决赛3:4达拉斯小牛<br>2006-07赛季，马刺58胜24负常规赛战绩进入季后赛。首轮比赛马刺4比1淘汰丹佛掘金队。马刺4-2淘汰菲尼克斯太阳队。西部决赛马刺4-1轻取犹他爵士。随后在总决赛中以4比0横扫克利夫兰骑士队<br>2007-08赛季，马刺以56胜26负的成绩以排名西部第三挺进季后赛。季后赛首轮马刺4-1淘汰菲尼克斯太阳队。次轮鏖战7场后险胜克里斯·保罗领衔的新奥尔良黄蜂队，与湖人会师西部决赛，但最终1-4遗憾结束卫冕之旅。<br>2008-09赛季，马刺以54胜28负结束常规赛。但在季后赛首轮中1-4不敌达拉斯小牛队。<br>2009-10赛季，马刺得了50胜的战绩。季后赛首轮4比2爆冷击败了西部第二的小牛队，但在第二轮惨遭菲尼克斯太阳队横扫。<br>2010-11赛季，马刺取得常规赛西部第一，总排名第二的好成绩。季后赛首轮马刺2比4不敌西部排名第八孟菲斯灰熊队<br>2011-12赛季，马刺队以50胜16负的战绩与东部的公牛队并列联盟第一。马刺连续第15次杀入季后赛；雷霆4比2淘汰马刺。<br>2012-13赛季，马刺取得58胜24负。季后赛首轮4比0横扫湖人。第二轮4-2淘汰勇士。西部决赛4-0横扫灰熊。总决赛前五场，马刺3比2领先迈阿密热火队，第六场最后7秒，雷·阿伦射中关键一球，帮助热火加时获胜，将总决赛拖进抢七局。第七场，马刺88比95不敌热火，遗憾获得亚军。<br>2013-14赛季，马刺最终以62胜20负的常规赛排名联盟第一。季后赛首轮马刺4比3淘汰小牛队。西部半决赛4比1淘汰开拓者队。西部决赛4比2淘汰雷霆队，再度与卫冕冠军热火队会师总决赛。最终马刺4比1夺冠。<br>2014-15赛季，季后赛首轮面对洛杉矶快船队，双方战至第七场，最终快船凭借保罗终场前1秒准绝杀战胜马刺。<br>2015-16赛季，马刺常规赛结束时马刺以67胜15负的战绩刷新队史记录，季后赛首轮马刺4-0淘汰灰熊，西部半决赛2-4不敌雷霆。<br>2016-17赛季，常规赛马刺取得61胜21负，首轮4比2战胜灰熊，西部半决赛4比2战胜火箭后，勇士以4-0的总比分横扫马刺。</p><p>  从季后赛成绩来看，（忽略伤病因素）东部球星由于对阵机会相对较少<br>参考意义一般。下列球员可以算得上马刺克星<br>科比</p><p>奥尼尔</p><p>杜兰特</p><p>诺维斯基</p><p>个人觉得 库里 保罗 目前来看算半个。<br>马刺克的球星就多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;搬运来自虎扑的一篇文章来练练手吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bbs.hupu.com/20276224.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;21世纪始终位于第一梯队的马刺，哪些球员算得上他的克星&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;作者：神经病未见好转&quot;&gt;&lt;a href=&quot;#作者：神经病未见好转&quot; class=&quot;headerlink&quot; title=&quot;作者：神经病未见好转&quot;&gt;&lt;/a&gt;作者：神经病未见好转&lt;/h2&gt;&lt;h3 id=&quot;正文开始&quot;&gt;&lt;a href=&quot;#正文开始&quot; class=&quot;headerlink&quot; title=&quot;正文开始&quot;&gt;&lt;/a&gt;正文开始&lt;/h3&gt;&lt;p&gt;进入21世纪以来，马刺每年都进入季后赛，&lt;br&gt;99-00赛季，马刺取得了53胜29负的战绩，马刺在季后赛第一轮以1比3不敌太阳（邓肯半月板撕裂无缘季后赛）。&lt;br&gt;2000-01赛季，马刺取得了58胜24负的佳绩。季后赛第一轮3比1淘汰森林狼，西部半决赛4比1淘汰小牛。西部决赛中，马刺被当时如日中天的湖人队横扫&lt;br&gt;2001-02赛季，马刺再次取得58胜24负的战绩，邓肯获得常规赛MVP。西部半决赛马刺以1比4不敌湖人队。&lt;br&gt;2002-03赛季  马刺取得了60胜22负的常规赛成绩，季后赛第一轮，马刺以4比2淘汰太阳。西部半决赛4比2淘汰老对手湖人，西部决赛4比2淘汰小牛。总决赛，马刺击败篮网，赢得第二座NBA总冠军奖杯。&lt;br&gt;2003-04赛季  马刺4场横扫孟菲斯灰熊队。第二轮，马刺2:4湖人队。&lt;br&gt;2004-05赛季，以59胜23负的战绩结束常规赛 马刺以4比1轻取丹佛掘金队，4比2击败西雅图超音速队，4比1淘汰菲尼克斯太阳队。总决赛4:3底特律活塞队&lt;br&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>忆童年,天真无邪,美丽单纯</title>
    <link href="http://yoursite.com/2017/09/23/hello-world/"/>
    <id>http://yoursite.com/2017/09/23/hello-world/</id>
    <published>2017-09-23T12:00:08.145Z</published>
    <updated>2017-11-08T02:06:49.664Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://owq5oiqgs.bkt.clouddn.com/lantianbaiyun.jpg" alt="蓝天白云"><br>童年是最美好的，也是最令人怀念的，那时候纯洁，天真，没有烦恼，每到<br>遇到苦恼的时候，想想小时候的自己，就会感到很快乐，哈哈哈！</p><a id="more"></a><h2 id="图片展示"><a href="#图片展示" class="headerlink" title="图片展示"></a>图片展示</h2><blockquote><p>这些年，自己也收藏了一些童年的一些图片，刚开始创建博客，就放在上面吧，没事的时候看看，很机智，嘿嘿。</p></blockquote><p><a href="https://www.baidu.com/" target="_blank" rel="external">度娘是万能的，开始，先感谢一下度娘</a></p><blockquote><p>以下图片内容均来自互联网</p></blockquote><p><strong>注意，多图来袭</strong><br><div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div><script>new APlayer({element: document.getElementById("aplayer0"),narrow: false,autoplay: true,showlrc: 0,music: {title: "机器铃.砍菜刀",author: "张卫",url: "http://owq5oiqgs.bkt.clouddn.com/%E5%BC%A0%E5%8D%AB-%E6%9C%BA%E5%99%A8%E9%93%83%20%E7%A0%8D%E8%8F%9C%E5%88%80.mp3",pic: "http://owq5oiqgs.bkt.clouddn.com/tongnian.jpg",}});</script></p><p><img src="http://owq5oiqgs.bkt.clouddn.com/kaodigua.jpg" alt="烤地瓜"></p><p>哈哈烤地瓜很好吃，不过这也是一种技术活啊，我大学时，在家尝试，这烤地瓜的炉子总是搭不成功。。。</p><p><img src="http://owq5oiqgs.bkt.clouddn.com/dangong.jpg" alt="弹弓"><br>哈哈，小时候经常拿它打鸟，但是无奈水平太差，总是打不到。。</p><p><img src="http://owq5oiqgs.bkt.clouddn.com/dapa.jpg" alt="打趴"><br>这是我小时候玩的最嗨的游戏之一，真是怀念，接下来是之二。</p><p><img src="http://owq5oiqgs.bkt.clouddn.com/tanliuli.jpg" alt="弹琉璃"><br>这个游戏是我小时候玩的最嗨的游戏之二，最自豪的是，这俩游戏我都很厉害，哈哈哈！</p><p><img src="http://owq5oiqgs.bkt.clouddn.com/dianzi.jpg" alt="电子"><br>哈哈，大家小时候是不是都被这玩意电过，麻麻的，有的小伙伴一点都不怕，但是在一点不知情的情况下被电一次马上就会跳起来！</p><p><img src="http://owq5oiqgs.bkt.clouddn.com/youxiji.jpg" alt="游戏机"><br>古董般的掌上游戏机，记得玩得最多的就是俄罗斯方块，坦克大战和左右躲避的，好像是赛车。</p><p><img src="https://i.imgur.com/jNEpHHM.png" alt=""><br>恐怖星期二,没有电视剧的日子是那么的难熬!</p><p><img src="https://i.imgur.com/WVuLUm2.jpg" alt=""><br>刚学会骑自行车,跟小伙伴围着整个镇飞骑,渴了就找个大叔家,舀上一大碗甘甜的泉水.</p><p><img src="https://i.imgur.com/ruh54Qu.jpg" alt=""><br>下完雨后,大家一起挖黄泥捏泥然后摔在地上看谁摔得口子大!</p><p><img src="https://i.imgur.com/ewEurrN.png" alt=""><br>小时候就用它看电视,旋钮都调的滚瓜烂熟了,哈哈.</p><p><img src="https://i.imgur.com/bWzh6nR.jpg" alt=""><br>挤呀挤,挤挤就暖和了.</p><p><img src="https://i.imgur.com/vBUaXMy.png" alt=""><br>老古董了,我家就有一个,但是从来没用过,可能是已经通电了就不需要了吧,最后也因为盖新屋丢失了,好可惜…</p><p><img src="https://i.imgur.com/KQp0PzA.jpg" alt=""><br>小时候玩过,但是水平差得很…</p><p><img src="https://i.imgur.com/KUD4ckK.png" alt=""><br>等等,这孩子似曾相识…好像小时候的自己啊</p><p><img src="https://i.imgur.com/TYajpIh.jpg" alt=""><br>香气四溢的爆米花,随着”彭!”的一声,小伙伴的兴奋的抢一些塞进嘴里</p><p><img src="http://owq5oiqgs.bkt.clouddn.com/xiaoshihoudeyangzi.jpg" alt="童年的我"><br>看到这张图片，很多人都会很有感触，时间飞逝，童年一去不复返。就让这份回忆留在心中，永远记忆吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://owq5oiqgs.bkt.clouddn.com/lantianbaiyun.jpg&quot; alt=&quot;蓝天白云&quot;&gt;&lt;br&gt;童年是最美好的，也是最令人怀念的，那时候纯洁，天真，没有烦恼，每到&lt;br&gt;遇到苦恼的时候，想想小时候的自己，就会感到很快乐，哈哈哈！&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
